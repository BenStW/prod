require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe InvitationsController do
  
  before(:each) do
    @user_ben = FactoryGirl.create(:user)
    sign_in @user_ben
  end


  def valid_attributes
    {
      #:sender_id => @user_ben.id,
      :recipient_mail => "test@example.com"
    }
  end
  

  describe "POST create" do

    describe "with valid params" do    
      it "creates a new Invitation" do
        expect {
          post :create, {:invitation => valid_attributes}
        }.to change(Invitation, :count).by(1)
      end

      it "assigns a newly created invitation as @invitation" do
        post :create, {:invitation => valid_attributes}
        assigns(:invitation).should be_a(Invitation)
        assigns(:invitation).should be_persisted
      end

      it "redirects to the created invitation" do
        post :create, {:invitation => valid_attributes}
        response.should redirect_to(root_url)
      end
    
      it "sends an email" do 
         post :create, {:invitation => valid_attributes}
        invite_email = ActionMailer::Base.deliveries.last
        invite_email.subject.should == I18n.t("mailers.invitation_mail.subject", :sender_name => @user_ben.name)
      end
    end


    describe "with invalid params" do
      it "assigns a newly created but unsaved invitation as @invitation" do
        # Trigger the behavior that occurs when invalid params are submitted
        Invitation.any_instance.stub(:save).and_return(false)
        post :create, {:invitation => {}}
        assigns(:invitation).should be_a_new(Invitation)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Invitation.any_instance.stub(:save).and_return(false)
        post :create, {:invitation => {}}
        response.should redirect_to(root_url)
      end
    end

  end


 

end
