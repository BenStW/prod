require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe FriendshipsController do
  fixtures :users

  # This should return the minimal set of attributes required to create a valid
  # Friendship. As you add validations to Friendship, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {
      :friend_id => @user_steffi.id,
      :user_id => @user_ben.id
    }
  end
  
  
  before(:each) do
    @user_ben = users(:ben)
    @user_steffi = users(:steffi)
    sign_in @user_ben
  end

  describe "GET index" do
    it "assigns all friendships as @friendships" do
      friendship = Friendship.create! valid_attributes
      get :index
      assigns(:friendships).should eq([friendship])
    end
  end


  describe "POST create" do
    describe "with valid params" do
      it "creates a new Friendship" do
        expect {
          post :create, valid_attributes
        }.to change(Friendship, :count).by(2) # for forth and inverse friendship
      end

      it "assigns a newly created friendship as @friendship" do
        post :create,  valid_attributes
        assigns(:friendship).should be_a(Friendship)
        assigns(:friendship).should be_persisted
      end


    end


  end



  describe "DELETE destroy" do
    it "destroys the requested friendship" do
      friendship = Friendship.create! valid_attributes
      inverse_friend = Friendship.create! :user_id => @user_steffi.id, :friend_id => @user_ben.id
      expect {
        delete :destroy, {:id => friendship.to_param}
      }.to change(Friendship, :count).by(-2)
    end

    it "redirects to the friendships list" do
      friendship = Friendship.create! valid_attributes
      inverse_friend = Friendship.create! :user_id => @user_steffi.id, :friend_id => @user_ben.id
      delete :destroy, {:id => friendship.to_param}
      response.should redirect_to(friendships_url)
    end
  end

end
